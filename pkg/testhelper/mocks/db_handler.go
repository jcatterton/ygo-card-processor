// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "ygo-card-processor/models"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// DbHandler is an autogenerated mock type for the DbHandler type
type DbHandler struct {
	mock.Mock
}

// AddCard provides a mock function with given fields: ctx, card
func (_m *DbHandler) AddCard(ctx context.Context, card models.CardWithPriceInfo) (interface{}, error) {
	ret := _m.Called(ctx, card)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, models.CardWithPriceInfo) interface{}); ok {
		r0 = rf(ctx, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CardWithPriceInfo) error); ok {
		r1 = rf(ctx, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCards provides a mock function with given fields: ctx, cardList
func (_m *DbHandler) AddCards(ctx context.Context, cardList []interface{}) (int, error) {
	ret := _m.Called(ctx, cardList)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) int); ok {
		r0 = rf(ctx, cardList)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []interface{}) error); ok {
		r1 = rf(ctx, cardList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCard provides a mock function with given fields: ctx, id
func (_m *DbHandler) DeleteCard(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCardByNumber provides a mock function with given fields: ctx, serial
func (_m *DbHandler) GetCardByNumber(ctx context.Context, serial string) (*models.CardWithPriceInfo, error) {
	ret := _m.Called(ctx, serial)

	var r0 *models.CardWithPriceInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.CardWithPriceInfo); ok {
		r0 = rf(ctx, serial)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CardWithPriceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serial)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, filters
func (_m *DbHandler) GetCards(ctx context.Context, filters map[string]interface{}) ([]models.CardWithPriceInfo, error) {
	ret := _m.Called(ctx, filters)

	var r0 []models.CardWithPriceInfo
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) []models.CardWithPriceInfo); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CardWithPriceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *DbHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCardById provides a mock function with given fields: ctx, id, card
func (_m *DbHandler) UpdateCardById(ctx context.Context, id primitive.ObjectID, card models.CardWithPriceInfo) (*models.CardWithPriceInfo, error) {
	ret := _m.Called(ctx, id, card)

	var r0 *models.CardWithPriceInfo
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, models.CardWithPriceInfo) *models.CardWithPriceInfo); ok {
		r0 = rf(ctx, id, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CardWithPriceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, models.CardWithPriceInfo) error); ok {
		r1 = rf(ctx, id, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCardByNumber provides a mock function with given fields: ctx, serial, card
func (_m *DbHandler) UpdateCardByNumber(ctx context.Context, serial string, card models.CardWithPriceInfo) (*models.CardWithPriceInfo, error) {
	ret := _m.Called(ctx, serial, card)

	var r0 *models.CardWithPriceInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CardWithPriceInfo) *models.CardWithPriceInfo); ok {
		r0 = rf(ctx, serial, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CardWithPriceInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, models.CardWithPriceInfo) error); ok {
		r1 = rf(ctx, serial, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
