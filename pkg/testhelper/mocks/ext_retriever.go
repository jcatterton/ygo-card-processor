// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "ygo-card-processor/models"
)

// ExtRetriever is an autogenerated mock type for the ExtRetriever type
type ExtRetriever struct {
	mock.Mock
}

// BasicCardSearch provides a mock function with given fields: ctx, serial
func (_m *ExtRetriever) BasicCardSearch(ctx context.Context, serial string) (*models.SearchResponse, error) {
	ret := _m.Called(ctx, serial)

	var r0 *models.SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SearchResponse); ok {
		r0 = rf(ctx, serial)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serial)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendedCardSearch provides a mock function with given fields: ctx, productId
func (_m *ExtRetriever) ExtendedCardSearch(ctx context.Context, productId int) (*models.ExtendedSearchResponse, error) {
	ret := _m.Called(ctx, productId)

	var r0 *models.ExtendedSearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ExtendedSearchResponse); ok {
		r0 = rf(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExtendedSearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardPricingInfo provides a mock function with given fields: ctx, productId
func (_m *ExtRetriever) GetCardPricingInfo(ctx context.Context, productId int) (*models.PriceResponse, error) {
	ret := _m.Called(ctx, productId)

	var r0 *models.PriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.PriceResponse); ok {
		r0 = rf(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, publicKey, privateKey
func (_m *ExtRetriever) RefreshToken(ctx context.Context, publicKey string, privateKey string) error {
	ret := _m.Called(ctx, publicKey, privateKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, publicKey, privateKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
